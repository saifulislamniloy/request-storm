name: Build & Deploy (docker run)

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  # Use one image name per service in a monorepo
  IMAGE: ghcr.io/${{ toLower(github.repository_owner) }}/ingestion-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Build JAR (subproject)
        working-directory: backend/ingestion-service
        run: ./gradlew clean build -x test

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push image from subdir
        uses: docker/build-push-action@v6
        with:
          context: backend/ingestion-service
          file: backend/ingestion-service/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
        name: ingestion-service            # must match the Environment you create
    steps:
      - name: SSH deploy with docker run
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}         # from Environment â†’ Secrets
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            docker pull "${{ env.IMAGE }}:${{ github.sha }}"
  
            docker ps -aq --filter "name=^/${{ env.CONTAINER }}$" | xargs -r docker stop
            docker ps -aq --filter "name=^/${{ env.CONTAINER }}$" | xargs -r docker rm
  
            docker run -d \
              --name "${{ env.CONTAINER }}" \
              --restart unless-stopped \
              --env-file "${{ env.ENV_FILE }}" \
              -p ${{ env.PORT }}:8080 \
              "${{ env.IMAGE }}:${{ github.sha }}"

            # optional cleanup
            docker image prune -f

